- String
  ------
1) Immutable object (in contrast to StringBuilder object)

All methods on String class that seem to change the value (state)
of the object return a NEW instance with the changed value!!! 

char literals -> String literals
E.g:

"Hello\n"
"Hello\12"
"\u559c"

Constructors
------------
literal String using "..."
public String(char[] ca){}
public String(char[] ca, int offset, int count){}
public String(byte[] ba){}	// bytes encoded using the system's encoding

--------------
CONSTANT POOL!
--------------
String s1 = "Hello, World!";
String s2 = "Hello, World!";

// Compare the references to str1 and str2 objects
System.out.println("s1 == s2 is " + (s1 == s2))

Maybe TRUE because have the same state (data)
AND

String s3 = "Hello, World!";
String s4 = new String(s3);
String s5 = new String(s3);

// Compare the references to str4 and str5 objects
System.out.println("s4 == s5 is " + (s4 == s5))

FALSE because although have the same state (data)
cause
we explicitly asked the JVM to create a NEW reference
using new operator.

---------------------------------------------
Literal Strings sharing in the Constant Pool!
---------------------------------------------
The literal Strings are managed by what is called
"The Constant Pool",

A pool of strings, initially empty, that is 
maintained privately by the class String.
---------------------------------------------

---------------------------------------------
String sFromConstantPool = str1.intern();
---------------------------------------------
intern() returns a string that
has the same contents as this string, but is
guaranteed to be from a pool of unique strings!!

// Algorithm:
When the intern method is invoked, 
if the pool already contains a string 
equal to this String object 
as determined by the equals(Object) method, 
then the string from the pool is returned. 

Otherwise, this String object is added to the pool 
and a reference to this String object is returned.

// Hence:
It follows that for any two literal strings s and t, 
s.intern() == t.intern() is true 
if and only if 
s.equals(t) is true.
---------------------------------------------


---------------------------------------------
code points
---------------------------------------------
regular expressions
---------------------------------------------